<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans default-autowire="byName">
	<bean id="shopReadDS" class="org.apache.tomcat.jdbc.pool.DataSource">
		<!-- jdbc properties -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<!-- zeroDateTimeBehavior: 
			 mysql supports value 0 for date columns, however these values can not be represented by jdbc.sql.Date,
			 parameter zeroDateTimeBehavior can tell mysql jdbc driver to convert such values to java null.
			 see: http://dev.mysql.com/doc/refman/5.0/en/connector-j-reference-configuration-properties.html
		-->
 		<property name="url" value="${prop.jdbc.shop.read.url}" /> 
 		<property name="username" value="${prop.jdbc.shop.read.username}" /> 
 		<property name="password" value="${prop.jdbc.shop.read.password}" /> 
		
		<!-- transaction properties, this is necessary because the default isolation level in some db is repeatable read! -->
		<property name="defaultAutoCommit" value="true" />
		<!-- TRANSACTION_NONE:0 -->
		<!-- TRANSACTION_READ_UNCOMMITTED:1 -->
		<!-- READ_COMMITTED:2 -->
		<!-- TRANSACTION_REPEATABLE_READ:4 -->
		<!-- TRANSACTION_SERIALIZABLE:8 -->
		<property name="defaultTransactionIsolation" value="2" />
		
		<!-- sizing the connection pool -->
		<property name="initialSize" value="${prop.jdbc.default.pool.initialSize}" />
		<property name="minIdle" value="${prop.jdbc.default.pool.minIdle}" />
		<property name="maxIdle" value="${prop.jdbc.default.pool.maxIdle}" />
		<property name="maxActive" value="${prop.jdbc.default.pool.maxActive}" />
		<!-- in milliseconds -->
		<property name="maxWait" value="${prop.jdbc.default.pool.maxWait}" />
		
		<!-- connection validation properties -->
		<!-- transaction is not encouraged in our situation, in most cases we use defaultAutoCommit=true,
		     testOnBorrow=true will result in the connection returning to the pool after a dao invocation and re-requesting a 
		     connection from the pool before each dao invocation, an additional validation query for every dao 
		     invocation, so the following "validationInterval" settings is important for reducing the validation queries.
		     see: spring jdbc abstraction and transaction management. 
		-->
		<property name="testOnBorrow" value="true" />
		<!-- the best performance validation query for mysql jdbc driver -->
		<!-- see: http://dev.mysql.com/doc/refman/5.0/en/connector-j-usagenotes-j2ee.html -->
		<property name="validationQuery" value="/* ping */ select 1" />
		<!-- in milliseconds, to ensure only one validation query is performed every 60 seconds -->
		<property name="validationInterval" value="${prop.jdbc.default.pool.validationInterval}" />
		
		<!-- sweeping idle connections -->
		<!-- set testWhileIdle true and timeBetweenEvictionRunsMillis greater than 0 to enable pool sweeper -->
		<!-- when pool sweeper disabled:  
		     if the idle pool is larger than maxIdle, the connection will be closed when returned to the pool, but
		     will never be shrunken down to minIdle -->
		<!-- when pool sweeper enabled:
		     number of idle connections can grow beyond maxIdle but can shrink down to minIdle if the connection has 
		     been idle for longer than minEvictableIdleTimeMillis. -->
		<property name="testWhileIdle" value="true" />
		<!-- in milliseconds, the sweeper runs every 120 seconds -->
		<property name="timeBetweenEvictionRunsMillis" value="${prop.jdbc.default.pool.timeBetweenEvictionRunsMillis}" />
		<!-- in milliseconds, the connection will be closed if the idle time is larger than 5 minutes -->
		<property name="minEvictableIdleTimeMillis" value="${prop.jdbc.default.pool.minEvictableIdleTimeMillis}" />
	</bean>
	<bean id="shopWriteDS" class="org.apache.tomcat.jdbc.pool.DataSource">
		<!-- jdbc properties -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<!-- zeroDateTimeBehavior: 
			 mysql supports value 0 for date columns, however these values can not be represented by jdbc.sql.Date,
			 parameter zeroDateTimeBehavior can tell mysql jdbc driver to convert such values to java null.
			 see: http://dev.mysql.com/doc/refman/5.0/en/connector-j-reference-configuration-properties.html
		-->
 		<property name="url" value="${prop.jdbc.shop.write.url}" /> 
 		<property name="username" value="${prop.jdbc.shop.write.username}" /> 
 		<property name="password" value="${prop.jdbc.shop.write.password}" /> 
		
		<!-- transaction properties, this is necessary because the default isolation level in some db is repeatable read! -->
		<property name="defaultAutoCommit" value="true" />
		<!-- TRANSACTION_NONE:0 -->
		<!-- TRANSACTION_READ_UNCOMMITTED:1 -->
		<!-- READ_COMMITTED:2 -->
		<!-- TRANSACTION_REPEATABLE_READ:4 -->
		<!-- TRANSACTION_SERIALIZABLE:8 -->
		<property name="defaultTransactionIsolation" value="2" />
		
		<!-- sizing the connection pool -->
		<property name="initialSize" value="${prop.jdbc.default.pool.initialSize}" />
		<property name="minIdle" value="${prop.jdbc.default.pool.minIdle}" />
		<property name="maxIdle" value="${prop.jdbc.default.pool.maxIdle}" />
		<property name="maxActive" value="${prop.jdbc.default.pool.maxActive}" />
		<!-- in milliseconds -->
		<property name="maxWait" value="${prop.jdbc.default.pool.maxWait}" />
		
		<!-- connection validation properties -->
		<!-- transaction is not encouraged in our situation, in most cases we use defaultAutoCommit=true,
		     testOnBorrow=true will result in the connection returning to the pool after a dao invocation and re-requesting a 
		     connection from the pool before each dao invocation, an additional validation query for every dao 
		     invocation, so the following "validationInterval" settings is important for reducing the validation queries.
		     see: spring jdbc abstraction and transaction management. 
		-->
		<property name="testOnBorrow" value="true" />
		<!-- the best performance validation query for mysql jdbc driver -->
		<!-- see: http://dev.mysql.com/doc/refman/5.0/en/connector-j-usagenotes-j2ee.html -->
		<property name="validationQuery" value="/* ping */ select 1" />
		<!-- in milliseconds, to ensure only one validation query is performed every 60 seconds -->
		<property name="validationInterval" value="${prop.jdbc.default.pool.validationInterval}" />
		
		<!-- sweeping idle connections -->
		<!-- set testWhileIdle true and timeBetweenEvictionRunsMillis greater than 0 to enable pool sweeper -->
		<!-- when pool sweeper disabled:  
		     if the idle pool is larger than maxIdle, the connection will be closed when returned to the pool, but
		     will never be shrunken down to minIdle -->
		<!-- when pool sweeper enabled:
		     number of idle connections can grow beyond maxIdle but can shrink down to minIdle if the connection has 
		     been idle for longer than minEvictableIdleTimeMillis. -->
		<property name="testWhileIdle" value="true" />
		<!-- in milliseconds, the sweeper runs every 120 seconds -->
		<property name="timeBetweenEvictionRunsMillis" value="${prop.jdbc.default.pool.timeBetweenEvictionRunsMillis}" />
		<!-- in milliseconds, the connection will be closed if the idle time is larger than 5 minutes -->
		<property name="minEvictableIdleTimeMillis" value="${prop.jdbc.default.pool.minEvictableIdleTimeMillis}" />
	</bean>
	
	<bean id="mShopReadDS" class="org.apache.tomcat.jdbc.pool.DataSource">
		<!-- jdbc properties -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<!-- zeroDateTimeBehavior: 
			 mysql supports value 0 for date columns, however these values can not be represented by jdbc.sql.Date,
			 parameter zeroDateTimeBehavior can tell mysql jdbc driver to convert such values to java null.
			 see: http://dev.mysql.com/doc/refman/5.0/en/connector-j-reference-configuration-properties.html
		-->
 		<property name="url" value="${prop.jdbc.mshop.read.url}" /> 
 		<property name="username" value="${prop.jdbc.mshop.read.username}" /> 
 		<property name="password" value="${prop.jdbc.mshop.read.password}" /> 
		
		<!-- transaction properties, this is necessary because the default isolation level in some db is repeatable read! -->
		<property name="defaultAutoCommit" value="true" />
		<!-- TRANSACTION_NONE:0 -->
		<!-- TRANSACTION_READ_UNCOMMITTED:1 -->
		<!-- READ_COMMITTED:2 -->
		<!-- TRANSACTION_REPEATABLE_READ:4 -->
		<!-- TRANSACTION_SERIALIZABLE:8 -->
		<property name="defaultTransactionIsolation" value="2" />
		
		<!-- sizing the connection pool -->
		<property name="initialSize" value="${prop.jdbc.default.pool.initialSize}" />
		<property name="minIdle" value="${prop.jdbc.default.pool.minIdle}" />
		<property name="maxIdle" value="${prop.jdbc.default.pool.maxIdle}" />
		<property name="maxActive" value="${prop.jdbc.default.pool.maxActive}" />
		<!-- in milliseconds -->
		<property name="maxWait" value="${prop.jdbc.default.pool.maxWait}" />
		
		<!-- connection validation properties -->
		<!-- transaction is not encouraged in our situation, in most cases we use defaultAutoCommit=true,
		     testOnBorrow=true will result in the connection returning to the pool after a dao invocation and re-requesting a 
		     connection from the pool before each dao invocation, an additional validation query for every dao 
		     invocation, so the following "validationInterval" settings is important for reducing the validation queries.
		     see: spring jdbc abstraction and transaction management. 
		-->
		<property name="testOnBorrow" value="true" />
		<!-- the best performance validation query for mysql jdbc driver -->
		<!-- see: http://dev.mysql.com/doc/refman/5.0/en/connector-j-usagenotes-j2ee.html -->
		<property name="validationQuery" value="/* ping */ select 1" />
		<!-- in milliseconds, to ensure only one validation query is performed every 60 seconds -->
		<property name="validationInterval" value="${prop.jdbc.default.pool.validationInterval}" />
		
		<!-- sweeping idle connections -->
		<!-- set testWhileIdle true and timeBetweenEvictionRunsMillis greater than 0 to enable pool sweeper -->
		<!-- when pool sweeper disabled:  
		     if the idle pool is larger than maxIdle, the connection will be closed when returned to the pool, but
		     will never be shrunken down to minIdle -->
		<!-- when pool sweeper enabled:
		     number of idle connections can grow beyond maxIdle but can shrink down to minIdle if the connection has 
		     been idle for longer than minEvictableIdleTimeMillis. -->
		<property name="testWhileIdle" value="true" />
		<!-- in milliseconds, the sweeper runs every 120 seconds -->
		<property name="timeBetweenEvictionRunsMillis" value="${prop.jdbc.default.pool.timeBetweenEvictionRunsMillis}" />
		<!-- in milliseconds, the connection will be closed if the idle time is larger than 5 minutes -->
		<property name="minEvictableIdleTimeMillis" value="${prop.jdbc.default.pool.minEvictableIdleTimeMillis}" />
	</bean>
	<bean id="mShopWriteDS" class="org.apache.tomcat.jdbc.pool.DataSource">
		<!-- jdbc properties -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<!-- zeroDateTimeBehavior: 
			 mysql supports value 0 for date columns, however these values can not be represented by jdbc.sql.Date,
			 parameter zeroDateTimeBehavior can tell mysql jdbc driver to convert such values to java null.
			 see: http://dev.mysql.com/doc/refman/5.0/en/connector-j-reference-configuration-properties.html
		-->
 		<property name="url" value="${prop.jdbc.mshop.write.url}" /> 
 		<property name="username" value="${prop.jdbc.mshop.write.username}" /> 
 		<property name="password" value="${prop.jdbc.mshop.write.password}" /> 
		
		<!-- transaction properties, this is necessary because the default isolation level in some db is repeatable read! -->
		<property name="defaultAutoCommit" value="true" />
		<!-- TRANSACTION_NONE:0 -->
		<!-- TRANSACTION_READ_UNCOMMITTED:1 -->
		<!-- READ_COMMITTED:2 -->
		<!-- TRANSACTION_REPEATABLE_READ:4 -->
		<!-- TRANSACTION_SERIALIZABLE:8 -->
		<property name="defaultTransactionIsolation" value="2" />
		
		<!-- sizing the connection pool -->
		<property name="initialSize" value="${prop.jdbc.default.pool.initialSize}" />
		<property name="minIdle" value="${prop.jdbc.default.pool.minIdle}" />
		<property name="maxIdle" value="${prop.jdbc.default.pool.maxIdle}" />
		<property name="maxActive" value="${prop.jdbc.default.pool.maxActive}" />
		<!-- in milliseconds -->
		<property name="maxWait" value="${prop.jdbc.default.pool.maxWait}" />
		
		<!-- connection validation properties -->
		<!-- transaction is not encouraged in our situation, in most cases we use defaultAutoCommit=true,
		     testOnBorrow=true will result in the connection returning to the pool after a dao invocation and re-requesting a 
		     connection from the pool before each dao invocation, an additional validation query for every dao 
		     invocation, so the following "validationInterval" settings is important for reducing the validation queries.
		     see: spring jdbc abstraction and transaction management. 
		-->
		<property name="testOnBorrow" value="true" />
		<!-- the best performance validation query for mysql jdbc driver -->
		<!-- see: http://dev.mysql.com/doc/refman/5.0/en/connector-j-usagenotes-j2ee.html -->
		<property name="validationQuery" value="/* ping */ select 1" />
		<!-- in milliseconds, to ensure only one validation query is performed every 60 seconds -->
		<property name="validationInterval" value="${prop.jdbc.default.pool.validationInterval}" />
		
		<!-- sweeping idle connections -->
		<!-- set testWhileIdle true and timeBetweenEvictionRunsMillis greater than 0 to enable pool sweeper -->
		<!-- when pool sweeper disabled:  
		     if the idle pool is larger than maxIdle, the connection will be closed when returned to the pool, but
		     will never be shrunken down to minIdle -->
		<!-- when pool sweeper enabled:
		     number of idle connections can grow beyond maxIdle but can shrink down to minIdle if the connection has 
		     been idle for longer than minEvictableIdleTimeMillis. -->
		<property name="testWhileIdle" value="true" />
		<!-- in milliseconds, the sweeper runs every 120 seconds -->
		<property name="timeBetweenEvictionRunsMillis" value="${prop.jdbc.default.pool.timeBetweenEvictionRunsMillis}" />
		<!-- in milliseconds, the connection will be closed if the idle time is larger than 5 minutes -->
		<property name="minEvictableIdleTimeMillis" value="${prop.jdbc.default.pool.minEvictableIdleTimeMillis}" />
	</bean>
	
	
</beans>