<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:aop="http://www.springframework.org/schema/aop" 
        xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
        xmlns:cache="http://www.springframework.org/schema/cache"
        xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/aop 
        	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://code.alibabatech.com/schema/dubbo
            http://code.alibabatech.com/schema/dubbo/dubbo.xsd
            http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache.xsd">
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="${pom.dubbo.properties-file}" />
	</bean>

	<bean id="cacheFactory" class="com.haier.m.tiemredis.CacheFactory">
		<property name="redisConfigPath" value="${pom.redis.config}" />
	</bean>
	<!-- bean config -->
    <import resource="classpath:datasources.xml" />
    
    <!-- anotation scan -->
	<context:component-scan base-package="com.haier.m.*"/>
	
	<bean id="shopReadSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="mapperLocations" value="classpath:sql-mapper/shop/read/*.xml" />
		<property name="dataSource" ref="shopReadDS" />
	</bean>

	<bean id="shoprWriteSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="mapperLocations" value="classpath:sql-mapper/shop/write/*.xml" />
		<property name="dataSource" ref="shopWriteDS" />
	</bean>
	
	<bean id="mShopReadSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="mapperLocations" value="classpath:sql-mapper/mshop/read/*.xml" />
		<property name="dataSource" ref="mShopReadDS" />
	</bean>
	
	<bean id="mShopWriteSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="mapperLocations" value="classpath:sql-mapper/mshop/write/*.xml" />
		<property name="dataSource" ref="mShopWriteDS" />
	</bean>
	
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="shopWriteDS" />
	</bean>
	
	<bean id="transactionManagerMshop" 
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="mShopWriteDS" />
	</bean>
    
    <import resource="classpath:mobile-item-service-config.xml" />

	
	
	<!-- spring cache 配置 -->
	<!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->
	<cache:annotation-driven cache-manager="cacheManager" />
	
	<!-- spring自己的换管理器，这里定义了两个缓存位置名称 ，既注解中的value -->
	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
		<property name="caches">
			<set>
				<bean class="com.haier.m.tiemredis.RedisCache">
					<constructor-arg index="0" value="default" />
					<constructor-arg index="1"
						value="classpath:/${pom.redis.config}" />
				</bean>
			</set>
		</property>
	</bean>
	
	<!-- dubbo config -->
    <dubbo:provider threadpool="cached" loadbalance="roundrobin" cluster="failfast" delay="-1"/>
    
    <dubbo:protocol name="dubbo" port="${prop.dubbo.protocol.port}" />
    <dubbo:registry protocol="${prop.registry.protocol}" address="${prop.registry.private.address}" subscribe="false" group="${prop.dubbo.provider.group}" />
    <dubbo:registry protocol="${prop.registry.protocol}" address="${prop.registry.public.address}" register="false" group="${prop.dubbo.consumer.group}"/>
	
	<!-- wechat -->
	<dubbo:service ref="itemServiceM" interface="com.haier.m.service.item.ItemServiceM"  delay="-1"
				   cluster="failfast"/>
	<dubbo:service ref="regionService"  interface="com.haier.m.service.region.RegionService"  delay="-1" cluster="failfast"/>

	<dubbo:service ref="reOrderServiceM"  interface="com.haier.m.service.order.ReOrderServiceM"  delay="-1" cluster="failfast"/>

	<dubbo:service ref="brandServiceM"  interface="com.haier.m.service.brand.BrandServiceM"  delay="-1" cluster="failfast"/>
	
	<dubbo:service ref="itemLogService"  interface="com.haier.m.service.item.ItemLogService"  delay="-1" cluster="failfast"/>

	<!-- 商品改造 -->
	<dubbo:service ref="sgStoreProductsAttributeService"  interface="com.haier.m.service.item.SgStoreProductsAttributeService"  delay="-1" cluster="failfast"/>
	<dubbo:service ref="sgAttributeService"  interface="com.haier.m.service.item.SgAttributeService"  delay="-1" cluster="failfast"/>
</beans>