<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.haier.m.dao.shop.read.OrderReadDao">
    <resultMap id="orderResult" type="com.haier.m.entity.order.OrderInfo">
        <result property="id" column="id"/>
        <result property="orderSn" column="orderSn"/>
        <result property="memberId" column="memberId"/>
        <result property="addTime" column="addTime"/>
        <result property="orderStatus" column="orderStatus"/>
        <result property="payTime" column="payTime"/>
        <result property="paymentStatus" column="paymentStatus"/>
        <result property="productAmount" column="productAmount"/>
        <result property="orderAmount" column="orderAmount"/>
        <result property="consignee" column="consignee"/>
        <result property="regionName" column="regionName"/>
        <result property="address" column="address"/>
        <result property="mobile" column="mobile"/>
        <result property="confirmTime" column="confirmTime"/>
        <result property="firstConfirmTime" column="firstConfirmTime"/>
        <result property="ckCode" column="ckCode"/>
        <result property="isCod" column="isCod"/>
        <result property="paymentCode" column="paymentCode"/>
        <result property="orderType" column="orderType"/>
        <result property="relationOrderSn" column="relationOrderSn"/>
        <result property="street" column="street"/>
    </resultMap>
    <resultMap id = "OrderListResult" type="com.haier.m.entity.order.OrderVo">
    	<id property="orderId" column="id"/>
    	<result property="source" column="source"/>
        <result property="orderSn" column="orderSn"/>
        <result property="memberId" column="memberId"/>
        <result property="addTimeStamp" column="addTime"/>
        <result property="payTimeStamp" column="payTime"/>
        <result property="orderStatus" column="orderStatus"/>
        <result property="paymentStatus" column="paymentStatus"/>
        <result property="productAmount" column="productAmount"/>
        <result property="orderAmount" column="orderAmount"/>
        <result property="consignee" column="consignee"/>
        <result property="regionName" column="regionName"/>
        <result property="address" column="address"/>
        <result property="mobile" column="mobile"/>
        <result property="codConfirmTime" column="codConfirmTime"/>
        <result property="ckCode" column="ckCode"/>
        <result property="isCod" column="isCod"/>
        <result property="paymentCode" column="paymentCode"/>
        <result property="orderType" column="orderType"/>
        <result property="relationOrderSn" column="relationOrderSn"/>
        <result property="street" column="street"/>
        <collection property="orderProducts" ofType="com.haier.m.entity.order.OrderProductVo">
        	<id property="orderProductId" column="orderProductId"/>
	    	<result property="cOrderSn" column="cOrderSn"/>
	        <result property="isBook" column="isBook"/>
	        <result property="productId" column="productId"/>
	        <result property="sku" column="sku"/>
	        <result property="price" column="price"/>
	        <result property="number" column="number"/>
	       	<result property="productAmount" column="orderProductAmount"/>
	        <result property="productName" column="productName"/>
	        <result property="couponCodeValue" column="couponCodeValue"/>
	        <result property="orderPromotionAmount" column="orderPromotionAmount"/>
	        <result property="couponAmount" column="couponAmount"/>
	        <result property="orderRepairId" column="orderRepairId"/>
	        <result property="stockType" column="stockType"/>
	        <result property="status" column="status"/>
	        <result property="shippingMode" column="shippingMode"/>
	        <result property="couponCode" column="couponCode"/>
	        <result property="shippingFee" column="shippingFee"/>
        </collection>
    </resultMap>
    <select id="getOrderById" parameterType="int" resultMap="orderResult">
    	select *
    	from Orders
    	WHERE id = #{orderId}
    </select>
    <select id="getOrderByOrderSn" parameterType="string" resultMap="orderResult">
    	SELECT *
    	FROM Orders
    	WHERE orderSn = #{orderSn}
    </select>
    <select id="getOrderCountsByConditions" parameterType="java.util.Map" resultType="int">
    SELECT count(1) from Orders
    </select>

    <select id="getOrderListByConditions" parameterType="java.util.Map" resultMap="orderResult">
      SELECT t.* FROM(
      	(SELECT  o.id,o.source, o.orderSn,o.memberId,o.orderStatus,o.paymentStatus,o.productAmount,
                o.orderAmount,o.consignee,o.isCod,o.paymentCode,o.codConfirmTime,
                o.orderType,o.relationOrderSn,o.street,
                from_unixtime(o.addTime, '%Y-%m-%d') as addTime,
                from_unixtime(o.payTime, '%Y-%m-%d') as payTime,
                from_unixtime(o.confirmTime, '%Y-%m-%d') as confirmTime,
                from_unixtime(o.firstConfirmTime, '%Y-%m-%d') as firstConfirmTime,
                o.regionName,o.address,o.mobile,o.ckCode,o.addTime as addTimeStamp,o.payTime as payTimeStamp
        FROM Orders o
        <choose>
            <when test="ids==null and memberId != null and ckCode != null">
                WHERE o.memberId = #{memberId}) 
                UNION (
                SELECT  o.id,o.source, o.orderSn,o.memberId,o.orderStatus,o.paymentStatus,o.productAmount,
                o.orderAmount,o.consignee,o.isCod,o.paymentCode,o.codConfirmTime,
                o.orderType,o.relationOrderSn,o.street,
                from_unixtime(o.addTime, '%Y-%m-%d') as addTime,
                from_unixtime(o.payTime, '%Y-%m-%d') as payTime,
                from_unixtime(o.confirmTime, '%Y-%m-%d') as confirmTime,
                from_unixtime(o.firstConfirmTime, '%Y-%m-%d') as firstConfirmTime,
                o.regionName,o.address,o.mobile,o.ckCode,o.addTime as addTimeStamp,o.payTime as payTimeStamp
        		FROM Orders o
                WHERE o.ckCode = CONCAT(#{ckCode},'') AND o.memberId != #{ckCode})
            </when>
            <when test="ids==null and memberId != null and ckCode == null">
                WHERE o.memberId = #{memberId})
            </when>
            <when test="ids==null and memberId == null and ckCode != null">
                WHERE o.ckCode = CONCAT(#{ckCode},'') AND o.memberId != #{ckCode})
            </when>
            <when test="ids==null and memberId == null and ckCode == null">
                WHERE 1 = -1)
            </when>
            <when test="ids.size()>0 and memberId != null and ckCode != null">
                WHERE o.memberId = #{memberId}) 
                UNION (
                SELECT  o.id,o.source, o.orderSn,o.memberId,o.orderStatus,o.paymentStatus,o.productAmount,
                o.orderAmount,o.consignee,o.isCod,o.paymentCode,o.codConfirmTime,
                o.orderType,o.relationOrderSn,o.street,
                from_unixtime(o.addTime, '%Y-%m-%d') as addTime,
                from_unixtime(o.payTime, '%Y-%m-%d') as payTime,
                from_unixtime(o.confirmTime, '%Y-%m-%d') as confirmTime,
                from_unixtime(o.firstConfirmTime, '%Y-%m-%d') as firstConfirmTime,
                o.regionName,o.address,o.mobile,o.ckCode,o.addTime as addTimeStamp,o.payTime as payTimeStamp
        		FROM Orders o
                WHERE o.ckCode = CONCAT(#{ckCode},'') AND o.memberId != #{ckCode}) 
				UNION ( 
				SELECT  o.id,o.source, o.orderSn,o.memberId,o.orderStatus,o.paymentStatus,o.productAmount,
                o.orderAmount,o.consignee,o.isCod,o.paymentCode,o.codConfirmTime,
                o.orderType,o.relationOrderSn,o.street,
                from_unixtime(o.addTime, '%Y-%m-%d') as addTime,
                from_unixtime(o.payTime, '%Y-%m-%d') as payTime,
                from_unixtime(o.confirmTime, '%Y-%m-%d') as confirmTime,
                from_unixtime(o.firstConfirmTime, '%Y-%m-%d') as firstConfirmTime,
                o.regionName,o.address,o.mobile,o.ckCode,o.addTime as addTimeStamp,o.payTime as payTimeStamp
        		FROM Orders o
				WHERE o.memberId IN
                <foreach collection="ids" item="id" index="index" open="(" separator="," close=")">
                    CONCAT(#{id},'')
                </foreach>)

            </when>
            <when test="ids.size()>0 and memberId != null and ckCode == null">
                WHERE o.memberId = #{memberId}) 
                UNION(
                SELECT  o.id,o.source, o.orderSn,o.memberId,o.orderStatus,o.paymentStatus,o.productAmount,
                o.orderAmount,o.consignee,o.isCod,o.paymentCode,o.codConfirmTime,
                o.orderType,o.relationOrderSn,o.street,
                from_unixtime(o.addTime, '%Y-%m-%d') as addTime,
                from_unixtime(o.payTime, '%Y-%m-%d') as payTime,
                from_unixtime(o.confirmTime, '%Y-%m-%d') as confirmTime,
                from_unixtime(o.firstConfirmTime, '%Y-%m-%d') as firstConfirmTime,
                o.regionName,o.address,o.mobile,o.ckCode,o.addTime as addTimeStamp,o.payTime as payTimeStamp
        		FROM Orders o
                WHERE o.memberId IN
                <foreach collection="ids" item="id" index="index" open="(" separator="," close=")">
                    #{id}
                </foreach>
                )
            </when>
            <when test="ids.size()>0 and memberId == null and ckCode != null">
                WHERE o.ckCode = CONCAT(#{ckCode},'') AND o.memberId != #{ckCode})
                UNION(
                SELECT  o.id,o.source, o.orderSn,o.memberId,o.orderStatus,o.paymentStatus,o.productAmount,
                o.orderAmount,o.consignee,o.isCod,o.paymentCode,o.codConfirmTime,
                o.orderType,o.relationOrderSn,o.street,
                from_unixtime(o.addTime, '%Y-%m-%d') as addTime,
                from_unixtime(o.payTime, '%Y-%m-%d') as payTime,
                from_unixtime(o.confirmTime, '%Y-%m-%d') as confirmTime,
                from_unixtime(o.firstConfirmTime, '%Y-%m-%d') as firstConfirmTime,
                o.regionName,o.address,o.mobile,o.ckCode,o.addTime as addTimeStamp,o.payTime as payTimeStamp
        		FROM Orders o
                WHERE o.memberId IN
                <foreach collection="ids" item="id" index="index" open="(" separator="," close=")">
                    #{id}
                </foreach>
                )
            </when>
            <when test="ids.size()>0 and memberId == null and ckCode == null">
                WHERE o.memberId IN
                <foreach collection="ids" item="id" index="index" open="(" separator="," close=")">
                    CONCAT(#{id},'')
                </foreach>
                )
            </when>
            <otherwise>

            </otherwise>
        </choose>
      ) t LEFT JOIN OrderRepairs op ON op.orderId = t.id inner join OrderProducts ops ON t.id=ops.orderId
      WHERE t.orderType != 2
        <if test="toBePaid != null and toBePaid != ''">
            AND t.paymentStatus = 100 AND t.isCod = 0 AND t.orderStatus = 200
            AND op.id is null
        </if>
        <if test="toBeShipped != null and toBeShipped != ''">
            AND t.orderStatus = 200 AND t.paymentStatus = 101
            AND op.id is null
        </if>
        <if test="isShipped != null and isShipped != ''">
            AND t.orderStatus = 201 AND op.id is null
        </if>
        <if test="completed != null and completed != ''">
            AND t.orderStatus = 203 AND op.id is null
        </if>
        <if test="closed != null and closed != ''">
            AND t.orderStatus = 202 AND op.id is null
        </if>
        <if test="rightService != null and rightService != ''and repairIds != null ">
            AND t.id IN
            <foreach collection="repairIds" item="id" index="index" open="(" separator="," close=")">
                #{id}
            </foreach>
        </if>
        <if test="rightService != null and rightService != '' and repairIds == null ">
            AND t.id = -1
        </if>
        <if test="orderSn != null and orderSn != ''">
            AND t.orderSn LIKE concat('%', #{orderSn}, '%')
        </if>
        <if test="consignee != null and consignee != ''">
            AND t.consignee LIKE concat('%', #{consignee}, '%')
        </if>
        <if test="mobile != null and mobile != ''">
            AND t.mobile LIKE concat('%', #{mobile }, '%')
        </if>
        <if test="keyword != null and keyword != ''">
            AND ( t.orderSn LIKE concat('%', #{keyword}, '%')
            OR t.consignee LIKE concat('%', #{keyword}, '%')
            OR t.mobile LIKE concat('%', #{keyword }, '%')
	    	OR ops.productName LIKE concat('%', #{keyword }, '%')
            )
        </if>
        <if test="orderIds != null and orderIds.size() > 0">
        	AND t.id NOT IN
			<foreach collection="orderIds" item="id" index="num" open="(" separator="," close=")">
                    #{id}
            </foreach>
        </if>
        GROUP BY t.id
        ORDER BY t.addTime DESC,t.id DESC
        <if test="pageBeg != null and pageNum !=null">
          LIMIT #{pageBeg}, #{pageNum}
        </if>
    </select>
    
    <select id="getSwitchOrderSnByOrderId" parameterType="String" resultMap="orderResult">
        SELECT oss.addTime,oss.orderSn,oss.orderStatus,orderr.paymentStatus FROM Orders oss left join OrderRepairs  orderr on oss.id = orderr.orderId
        WHERE  oss.relationOrderSn = #{orderSn} ORDER BY oss.addTime desc limit 1;
    </select>

    <select id="hasOrder" parameterType="Integer" resultType="int">
        select count(1)
        from Orders
        WHERE memberId = #{memberId}
        AND paymentStatus = 1
        AND source='MSTORE'
    </select>
    
    <select id="getOrderCount" resultType="int">
    	SELECT
    		o.id
    	FROM Orders o INNER JOIN OrderProducts op ON o.id = op.orderId
    	LEFT JOIN OrderRepairs ors ON ors.orderProductId = op.id
    	WHERE o.memberId = #{memberId} 
    	<choose>
    		<when test="orderStatus == 1">
    			AND op.cPaymentStatus = 200 AND o.orderStatus != 202 and o.isCod = 0 AND ors.id IS NULL
    		</when>
    		<when test="orderStatus == 2">
    			AND op.status in (0,1,2,3,4,8,40)  AND (op.cPaymentStatus = 201 OR o.isCod = 1) AND ors.id IS NULL AND o.orderType != 2
    		</when>
    		<when test="orderStatus == 3">
    			AND op.status in (10,11,12,70) AND ors.id IS NULL AND o.orderType != 2
    		</when>
    		<when test="orderStatus == 4">
    			AND op.status in (130, 140) AND ors.id IS NULL AND op.closeTime > #{outDateTimeStamp} AND o.orderType != 2
    			<if test="assessOrderProductId != null and assessOrderProductId.size() > 0">
		    		AND op.id not in 
		    		<foreach collection="assessOrderProductId" item="id" index="index" open="(" separator="," close=")">
		                   #{id}
		            </foreach>
		    	</if>
    		</when>
    		<otherwise>
    			AND 1=-1
    		</otherwise>
    	</choose>
    	group by o.id
    </select>
    
    <select id="getOrderListByParam" parameterType="com.haier.m.entity.order.OrderQueryParam" resultMap="OrderListResult">
    	select os.* from (
    	SELECT  
    			@row_number := CASE
				WHEN  @customer_last = t.id  THEN  @row_number 
				ELSE  @row_number + 1
				END   AS  num,
				@customer_last:=t.id as orderId,
    			t.id, t.source, t.orderSn, t.memberId, t.orderStatus, t.paymentStatus, t.productAmount,
                t.orderAmount, t.consignee, t.isCod, t.paymentCode, t.codConfirmTime,
                t.orderType, t.relationOrderSn, t.street,
                t.addTime, t.payTime, t.regionName, t.address, t.mobile, t.ckCode,
                ops.id as orderProductId, ops.cOrderSn, ops.isBook, ops.productId,
                ops.sku, ops.productName, ops.price, ops.number, ops.couponCodeValue, ops.orderPromotionAmount,
                ops.couponAmount, ors.id as orderRepairId, ops.stockType, ops.status, 
                ops.shippingMode, ops.couponCode, ops.shippingFee, ops.productAmount as orderProductAmount
        FROM(
      	(SELECT id, source, orderSn, memberId, orderStatus, paymentStatus, productAmount,
                orderAmount, consignee, isCod, paymentCode, codConfirmTime,
                orderType, relationOrderSn, street,
                addTime, regionName, address, mobile, ckCode, payTime
        FROM Orders
        WHERE
        <choose>
        	<when test="memberId != null">
                 memberId = #{memberId}
                 <if test="excludeOrderProductId != null and excludeOrderProductId.size() > 0">
                 	AND id NOT IN
                 	<foreach collection="excludeOrderProductId" item="id" index="index" open="(" separator="," close=")">
                   		#{id}
                	</foreach>
                 </if>
            </when>
            <when test="memberList != null and memberList.size() > 0">
            	memberId IN
                <foreach collection="memberList" item="id" index="index" open="(" separator="," close=")">
                    #{id}
                </foreach>
            </when>
            <otherwise>
            	1=-1
            </otherwise>
       	</choose>
       	)
        <if test="ckCode != null">
                UNION (
                SELECT  id, source, orderSn, memberId, orderStatus, paymentStatus, productAmount,
	                orderAmount, consignee, isCod, paymentCode, codConfirmTime,
	                orderType, relationOrderSn, street,
	                addTime, regionName, address, mobile, ckCode, payTime
        		FROM Orders
                WHERE ckCode = #{ckCode} AND memberId != #{ckCode})
         </if>
      ) t 
      INNER JOIN OrderProducts ops ON t.id=ops.orderId
      LEFT JOIN OrderRepairs ors ON ors.orderProductId = ops.id ,
      (select @row_number := 0) ns
      WHERE t.orderType != 2
      <choose>
    		<when test="orderStatus == 1">
    			AND ops.cPaymentStatus = 200 AND t.orderStatus != 202 And t.isCod = 0
    		</when>
    		<when test="orderStatus == 2">
    			AND ops.status &lt; 70 and ops.status &gt;= 0 AND (ops.cPaymentStatus = 201 OR t.isCod = 1) AND ors.id IS NULL
    		</when>
    		<when test="orderStatus == 3">
    			AND ops.status = 70 AND ors.id IS NULL
    		</when>
    		<when test="orderStatus == 4">
    			AND ops.status in (130, 140) AND ors.id IS NULL AND ops.closeTime > #{outDateTimeStamp}
    			<if test="assessOrderProductId != null and assessOrderProductId.size() > 0">
		    		AND ops.id not in 
		    		<foreach collection="assessOrderProductId" item="id" index="index" open="(" separator="," close=")">
		                   #{id}
		            </foreach>
		    	</if>
    		</when>
    		<when test="orderStatus == 5">
    			AND ors.id is not null
    		</when>
    	</choose>
    	<if test="includeOrderProductId != null and includeOrderProductId.size() > 0">
    		AND ops.id in 
    		<foreach collection="includeOrderProductId" item="id" index="index" open="(" separator="," close=")">
                   #{id}
            </foreach>
    	</if>
    	<if test="includeOrderProductId != null and includeOrderProductId.size() == 0">
    		AND 1=-1
    	</if>
    	
    	<if test="key != null and key != ''">
            AND ( t.orderSn LIKE concat('%', #{key}, '%')
            OR t.consignee LIKE concat('%', #{key}, '%')
            OR t.mobile LIKE concat('%', #{key}, '%')
	    	OR ops.productName LIKE concat('%', #{key}, '%')
            )
        </if>
        ORDER BY t.id DESC) os
        <if test="pageBeg != null and pageNum !=null">
        WHERE 
          os.num > #{pageBeg} and os.num &lt;= #{pageNum}
        </if>
    </select>

    <select id="getOrderIDListByParam" parameterType="com.haier.m.entity.order.OrderQueryParam" resultType="int">
        SELECT
        DISTINCT t.id
        FROM(
        (SELECT id, orderSn, orderStatus, consignee, isCod, mobile,orderType
        FROM Orders
        WHERE
        <choose>
            <when test="memberId != null">
                memberId = #{memberId}
                <if test="excludeOrderProductId != null and excludeOrderProductId.size() > 0">
                    AND id NOT IN
                    <foreach collection="excludeOrderProductId" item="id" index="index" open="(" separator="," close=")">
                        #{id}
                    </foreach>
                </if>
            </when>
            <when test="memberList != null and memberList.size() > 0">
                memberId IN
                <foreach collection="memberList" item="id" index="index" open="(" separator="," close=")">
                    #{id}
                </foreach>
            </when>
            <otherwise>
                1=-1
            </otherwise>
        </choose>
        )
        <if test="ckCode != null">
            UNION (
            SELECT  id, orderSn, orderStatus, consignee, isCod, mobile,orderType
            FROM Orders
            WHERE ckCode = #{ckCode} AND memberId != #{ckCode})
        </if>
        ) t
        INNER JOIN OrderProducts ops ON t.id=ops.orderId
        LEFT JOIN OrderRepairs ors ON ors.orderProductId = ops.id
        WHERE t.orderType != 2
        <choose>
            <when test="orderStatus == 1">
                AND ops.cPaymentStatus = 200 AND t.orderStatus != 202 And t.isCod = 0
            </when>
            <when test="orderStatus == 2">
                AND ops.status in (0,1,2,3,4,8,40) AND (ops.cPaymentStatus = 201 OR t.isCod = 1) AND ors.id IS NULL
            </when>
            <when test="orderStatus == 3">
                AND ops.status in (10,11,12,70) AND ors.id IS NULL
            </when>
            <when test="orderStatus == 4">
                AND ops.status in (130, 140) AND ors.id IS NULL AND ops.closeTime > #{outDateTimeStamp}
                <if test="assessOrderProductId != null and assessOrderProductId.size() > 0">
                    AND ops.id not in
                    <foreach collection="assessOrderProductId" item="id" index="index" open="(" separator="," close=")">
                        #{id}
                    </foreach>
                </if>
            </when>
            <when test="orderStatus == 5">
                AND ors.id is not null
            </when>
        </choose>
        <if test="includeOrderProductId != null and includeOrderProductId.size() > 0">
            AND ops.id in
            <foreach collection="includeOrderProductId" item="id" index="index" open="(" separator="," close=")">
                #{id}
            </foreach>
        </if>
        <if test="includeOrderProductId != null and includeOrderProductId.size() == 0">
            AND 1=-1
        </if>

        <if test="key != null and key != ''">
            AND ( t.orderSn LIKE concat('%', #{key}, '%')
            OR t.consignee LIKE concat('%', #{key}, '%')
            OR t.mobile LIKE concat('%', #{key}, '%')
            OR ops.productName LIKE concat('%', #{key}, '%')
            )
        </if>
        ORDER BY t.id DESC
        Limit #{pageBeg},#{pageNum}
    </select>
    
    <select id="getOrderIDListWaitPay" parameterType="com.haier.m.entity.order.OrderQueryParam" resultType="int">
        SELECT
        	IFNULL(ors.id, t.id)
        FROM(
        (SELECT id, orderSn, orderStatus, relationOrderSn, isCod, paymentStatus
        FROM Orders
        WHERE
        <choose>
            <when test="memberId != null">
                memberId = #{memberId}
                <if test="excludeOrderProductId != null and excludeOrderProductId.size() > 0">
                    AND id NOT IN
                    <foreach collection="excludeOrderProductId" item="id" index="index" open="(" separator="," close=")">
                        #{id}
                    </foreach>
                </if>
            </when>
            <when test="memberList != null and memberList.size() > 0">
                memberId IN
                <foreach collection="memberList" item="id" index="index" open="(" separator="," close=")">
                    #{id}
                </foreach>
            </when>
            <otherwise>
                1=-1
            </otherwise>
        </choose>
        )
        <if test="ckCode != null">
            UNION (
            SELECT  id, orderSn, orderStatus, relationOrderSn, isCod, paymentStatus
            FROM Orders
            WHERE ckCode = #{ckCode} AND memberId != #{ckCode})
        </if>
        ) t
        LEFT JOIN Orders ors ON ors.orderSn = t.relationOrderSn
        WHERE  t.paymentStatus = 100 AND t.orderStatus != 202 And t.isCod = 0
        ORDER BY t.id DESC
        Limit #{pageBeg},#{pageNum}
    </select>

    <select id="getOrderListByIDList"  resultMap="OrderListResult">
        SELECT
        t.id, t.source, t.orderSn, t.memberId, t.orderStatus, t.paymentStatus, t.productAmount,
        t.orderAmount, t.consignee, t.isCod, t.paymentCode, t.codConfirmTime,
        t.orderType, t.relationOrderSn, t.street,
        t.addTime, t.payTime, t.regionName, t.address, t.mobile, t.ckCode,
        ops.id as orderProductId, ops.cOrderSn, ops.isBook, ops.productId,
        ops.sku, ops.productName, ops.price, ops.number, ops.couponCodeValue, ops.orderPromotionAmount,
        ops.couponAmount, ors.id as orderRepairId, ops.stockType, ops.status,
        ops.shippingMode, ops.couponCode, ops.shippingFee, ops.productAmount as orderProductAmount
        FROM Orders t
        INNER JOIN OrderProducts ops ON t.id=ops.orderId
        LEFT JOIN OrderRepairs ors ON ors.orderProductId = ops.id
        WHERE
             t.id in
            <foreach collection="idList" item="id" index="index" open="(" separator="," close=")">
                #{id}
            </foreach>
        ORDER BY t.id DESC
    </select>

    <select id="getOrderCountByParam" parameterType="com.haier.m.entity.order.OrderQueryParam" resultType="java.lang.Integer">
    	SELECT count(id) FROM (SELECT t.id
        FROM(
      	(SELECT id, source, orderSn, memberId, orderStatus, paymentStatus, productAmount,
                orderAmount, consignee, isCod, paymentCode, codConfirmTime,
                orderType, relationOrderSn, street,
                addTime, regionName, address, mobile, ckCode, payTime
        FROM Orders
        WHERE
        <choose>
        	<when test="memberId != null">
                 memberId = #{memberId}
                 <if test="excludeOrderProductId != null and excludeOrderProductId.size() > 0">
                 	AND id NOT IN
                 	<foreach collection="excludeOrderProductId" item="id" index="index" open="(" separator="," close=")">
                   		#{id}
                	</foreach>
                 </if>)
            </when>
            <when test="memberList != null and memberList.size() > 0">
            	memberId IN
                <foreach collection="memberList" item="id" index="index" open="(" separator="," close=")">
                    #{id}
                </foreach>)
            </when>
            <otherwise>
            	1=-1)
            </otherwise>
       	</choose>
        <if test="ckCode != null">
                UNION (
                SELECT  id, source, orderSn, memberId, orderStatus, paymentStatus, productAmount,
	                orderAmount, consignee, isCod, paymentCode, codConfirmTime,
	                orderType, relationOrderSn, street,
	                addTime, regionName, address, mobile, ckCode, payTime
        		FROM Orders
                WHERE ckCode = #{ckCode} AND memberId != #{ckCode})
         </if>
      ) t 
      INNER JOIN OrderProducts ops ON t.id=ops.orderId
      LEFT JOIN OrderRepairs ors ON ors.orderProductId = ops.id 
      <where> 
      <choose>
    		<when test="orderStatus == 1">
    			AND ops.cPaymentStatus = 200 AND t.orderStatus != 202 And t.isCod = 0
    		</when>
    		<when test="orderStatus == 2">
    			t.orderType != 2 AND ops.status in (0,1,2,3,4,8,40) and ops.status &gt;= 0 AND (ops.cPaymentStatus = 201 OR t.isCod = 1) AND ors.id IS NULL
    		</when>
    		<when test="orderStatus == 3">
    			t.orderType != 2 AND ops.status in (10,11,12,70) AND ors.id IS NULL
    		</when>
    		<when test="orderStatus == 4">
    			t.orderType != 2 AND ops.status in (130, 140) AND ors.id IS NULL AND ops.closeTime > #{outDateTimeStamp}
    			<if test="assessOrderProductId != null and assessOrderProductId.size() > 0">
		    		AND ops.id not in 
		    		<foreach collection="assessOrderProductId" item="id" index="index" open="(" separator="," close=")">
		                   #{id}
		            </foreach>
		    	</if>
    		</when>
    		<when test="orderStatus == 5">
    			t.orderType != 2 AND ors.id is not null
    		</when>
    	</choose>
    	<if test="includeOrderProductId != null and includeOrderProductId.size() > 0">
    		AND ops.id in 
    		<foreach collection="includeOrderProductId" item="id" index="index" open="(" separator="," close=")">
                   #{id}
            </foreach>
    	</if>
    	<if test="includeOrderProductId != null and includeOrderProductId.size() == 0">
    		AND 1=-1
    	</if>
    	
    	<if test="key != null and key != ''">
            AND ( t.orderSn LIKE concat('%', #{key}, '%')
            OR t.consignee LIKE concat('%', #{key}, '%')
            OR t.mobile LIKE concat('%', #{key}, '%')
	    	OR ops.productName LIKE concat('%', #{key}, '%')
            )
        </if>
        </where>
        GROUP BY t.id) gro
    </select>
    
    <select id = "getRelationOrder" resultType="com.haier.m.entity.order.RelationOrder">
    	SELECT
    		ops.cPayTime, ops.couponAmount
    	FROM Orders o
    	INNER JOIN OrderProducts ops on o.id = ops.orderId
    	WHERE orderSn = #{orderSn}
    	Limit 1
    </select>
</mapper>